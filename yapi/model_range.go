/*
 * Yahoo Finance
 *
 * Yahoo Finance API specification
 *
 * API version: 1.0.8
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yapi

import (
	"encoding/json"
	"fmt"
)

// Range the model 'Range'
type Range string

// List of Range
const (
	RANGE__1D Range = "1d"
	RANGE__5D Range = "5d"
	RANGE__1MO Range = "1mo"
	RANGE__3MO Range = "3mo"
	RANGE__6MO Range = "6mo"
	RANGE__1Y Range = "1y"
	RANGE__2Y Range = "2y"
	RANGE__5Y Range = "5y"
	RANGE__10Y Range = "10y"
	RANGE_YTD Range = "ytd"
	RANGE_MAX Range = "max"
)

var allowedRangeEnumValues = []Range{
	"1d",
	"5d",
	"1mo",
	"3mo",
	"6mo",
	"1y",
	"2y",
	"5y",
	"10y",
	"ytd",
	"max",
}

func (v *Range) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Range(value)
	for _, existing := range allowedRangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Range", value)
}

// NewRangeFromValue returns a pointer to a valid Range
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRangeFromValue(v string) (*Range, error) {
	ev := Range(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Range: valid values are %v", v, allowedRangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Range) IsValid() bool {
	for _, existing := range allowedRangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Range value
func (v Range) Ptr() *Range {
	return &v
}

type NullableRange struct {
	value *Range
	isSet bool
}

func (v NullableRange) Get() *Range {
	return v.value
}

func (v *NullableRange) Set(val *Range) {
	v.value = val
	v.isSet = true
}

func (v NullableRange) IsSet() bool {
	return v.isSet
}

func (v *NullableRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRange(val *Range) *NullableRange {
	return &NullableRange{value: val, isSet: true}
}

func (v NullableRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

