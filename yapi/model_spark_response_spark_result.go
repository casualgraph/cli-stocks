/*
 * Yahoo Finance
 *
 * Yahoo Finance API specification
 *
 * API version: 1.0.8
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yapi

import (
	"encoding/json"
)

// SparkResponseSparkResult struct for SparkResponseSparkResult
type SparkResponseSparkResult struct {
	Symbol *string `json:"symbol,omitempty"`
	Response *[]SparkResponseSparkResponse `json:"response,omitempty"`
}

// NewSparkResponseSparkResult instantiates a new SparkResponseSparkResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSparkResponseSparkResult() *SparkResponseSparkResult {
	this := SparkResponseSparkResult{}
	return &this
}

// NewSparkResponseSparkResultWithDefaults instantiates a new SparkResponseSparkResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSparkResponseSparkResultWithDefaults() *SparkResponseSparkResult {
	this := SparkResponseSparkResult{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SparkResponseSparkResult) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResult) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SparkResponseSparkResult) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *SparkResponseSparkResult) SetSymbol(v string) {
	o.Symbol = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *SparkResponseSparkResult) GetResponse() []SparkResponseSparkResponse {
	if o == nil || o.Response == nil {
		var ret []SparkResponseSparkResponse
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResult) GetResponseOk() (*[]SparkResponseSparkResponse, bool) {
	if o == nil || o.Response == nil {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *SparkResponseSparkResult) HasResponse() bool {
	if o != nil && o.Response != nil {
		return true
	}

	return false
}

// SetResponse gets a reference to the given []SparkResponseSparkResponse and assigns it to the Response field.
func (o *SparkResponseSparkResult) SetResponse(v []SparkResponseSparkResponse) {
	o.Response = &v
}

func (o SparkResponseSparkResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Response != nil {
		toSerialize["response"] = o.Response
	}
	return json.Marshal(toSerialize)
}

type NullableSparkResponseSparkResult struct {
	value *SparkResponseSparkResult
	isSet bool
}

func (v NullableSparkResponseSparkResult) Get() *SparkResponseSparkResult {
	return v.value
}

func (v *NullableSparkResponseSparkResult) Set(val *SparkResponseSparkResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSparkResponseSparkResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSparkResponseSparkResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSparkResponseSparkResult(val *SparkResponseSparkResult) *NullableSparkResponseSparkResult {
	return &NullableSparkResponseSparkResult{value: val, isSet: true}
}

func (v NullableSparkResponseSparkResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSparkResponseSparkResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


